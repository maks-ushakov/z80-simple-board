#include "Arduino.h"
#include "CPUMemoryLoader.h"

MemoryLoader::MemoryLoader(uint16_t maxAddr) {
  _maxAddr = maxAddr;
};

void MemoryLoader::init(CPUBoard * board) {
  _board = board;
};

uint8_t MemoryLoader::checkAddr(uint16_t addr) {
  return addr <= _maxAddr ? 1 : 0;
};

#ifndef CPU_MEMORY_MOCKED

#else

uint8_t mockRAM[] = {
  	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};


uint8_t MemoryLoader::getByte(uint16_t addr) {
   return checkAddr(addr) ? mockRAM[addr % (_maxAddr + 1)] : 0xff;
};

uint8_t MemoryLoader::setByte(uint16_t addr, uint8_t data) {
  if (checkAddr(addr)) {
    mockRAM[addr % (_maxAddr + 1)] = data;
    return 0;
  }
  return 0xff;
};
void MemoryLoader::printByte(uint16_t addr) {

};

void MemoryLoader::printBlock(uint16_t addr, uint16_t numByte, uint8_t base) {

};

uint8_t MemoryLoader::setBlock(uint16_t addr, uint8_t* ) {

};
#endif